# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
commands:
  print_pipeline_id:
    steps:
      - run:
          command: echo << pipeline.id >>

# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
jobs:
  aws_setup:
    docker:
    - image: amazon/aws-cli
    steps:
    - checkout
    - run:
        name: Ensure backend infrastucture exists
        command: |
          aws cloudformation deploy  --template-file template.yml --stack-name test-stack
    environment:
      AWS_ACCESS_KEY_ID: AKIAYM5JWN2XUR2OJK2B
      AWS_SECRET_ACCESS_KEY: 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
      AWS_DEFAULT_REGION: us-east-1
  print_hello:
    docker:
    - image: circleci/node:13.8.0
    steps:
    - run:
        name: Print Hello
        command: echo "Hello World" > output.txt
    - persist_to_workspace:
        root: ./
        paths:
          - ./*
  print_world:
    docker:
    - image: circleci/node:13.8.0
    steps:
    - attach_workspace:
        at: ./
    - run:
        name: Print World
        command: cat output.txt
  print_pipelineid:
    docker:
    - image: cimg/base:2021.04
    steps:
      - print_pipeline_id
  failure_job:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - run: return 1
      - run: 
         command: echo "it failed"
         when: on_fail
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - welcome/run
      - print_hello
      - print_world:
          requires:
            - print_hello
      - print_pipelineid
      - aws_setup
      - failure_job